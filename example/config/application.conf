# In this file you can override any option defined in the 'reference.conf' files.
# Copy in all or parts of the 'reference.conf' files and modify as you please.
# For more info about config, please visit the Akka Documentation: http://akka.io/docs/akka/2.3.9/

####################################
# Akka Actor Reference Config File #
####################################

# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.



REMOTE{
	akka {
	  actor.provider = "akka.remote.RemoteActorRefProvider"
	  # remote
	  remote {
	  	enabled-transports = ["akka.remote.netty.tcp"]
	  	netty.tcp {
	  		hostname = "127.0.0.1"
	  		port = 2552
	  	}
	  }
	  # DeadLetter log
	  log-dead-letters = 0
	  log-dead-letters-during-shutdown = off
	  
	  
	  actor.default-dispatcher {
	      type = "Dispatcher"
	      executor = "default-executor"
	      default-executor {
	        fallback = "thread-pool-executor"
	      }
	
	      thread-pool-executor {
	        # Keep alive time for threads
	        keep-alive-time = 120s
	
	        # Min number of threads to cap factor-based core number to
	        core-pool-size-min = 2
	
	        # The core pool size factor is used to determine thread pool core size
	        # using the following formula: ceil(available processors * factor).
	        # Resulting size is then bounded by the core-pool-size-min and
	        # core-pool-size-max values.
	        #core-pool-size-factor = 3.0
	
	        # Max number of threads to cap factor-based number to
	        core-pool-size-max = 2
	
	      }
	    }
	}
}

LOCAL{
	akka {
	  actor.provider = "akka.remote.RemoteActorRefProvider"
	  # DeadLetter log
	  log-dead-letters = 0
	  log-dead-letters-during-shutdown = off
	  
	  #serializer
	  actor {
	  	# Entries for pluggable serializers and their bindings.
	    serializers {
	      java = "akka.serialization.JavaSerializer"
	      bytes = "akka.serialization.ByteArraySerializer"
	      proto = "akka.remote.serialization.ProtobufSerializer"
	    }
	
	    # Class to Serializer binding. You only need to specify the name of an
	    # interface or abstract base class of the messages. In case of ambiguity it
	    # is using the most specific configured class, or giving a warning and
	    # choosing the “first” one.
	    #
	    # To disable one of the default serializers, assign its class to "none", like
	    # "java.io.Serializable" = none
	    serialization-bindings {
	      "java.lang.String" = java
	      "com.google.protobuf.Message" = proto
	    }
	  }
	  
	  actor.default-dispatcher {
	      type = "Dispatcher"
	      executor = "default-executor"
	      default-executor {
	        fallback = "thread-pool-executor"
	      }
	
	      thread-pool-executor {
	        # Keep alive time for threads
	        keep-alive-time = 120s
	
	        # Min number of threads to cap factor-based core number to
	        core-pool-size-min = 2
	
	        # The core pool size factor is used to determine thread pool core size
	        # using the following formula: ceil(available processors * factor).
	        # Resulting size is then bounded by the core-pool-size-min and
	        # core-pool-size-max values.
	        #core-pool-size-factor = 3.0
	
	        # Max number of threads to cap factor-based number to
	        core-pool-size-max = 2
	
	      }
	    }
	}
}
