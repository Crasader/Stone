/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : TreasureBoxContext.sm
 */

package com.stone.sm;

import com.stone.sm.host.Human;
import com.stone.sm.host.StateMachineMessages;
import com.stone.sm.host.TreasureBox;

public class TreasureBoxContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public TreasureBoxContext(TreasureBox owner)
    {
        super (MapBox.Default);

        _owner = owner;
    }

    public TreasureBoxContext(TreasureBox owner, TreasureBoxState initState)
    {
        super (initState);

        _owner = owner;
    }

    public void enterStartState()
    {
        getState().Entry(this);
        return;
    }

    public void clear()
    {
        _transition = "clear";
        getState().clear(this);
        _transition = "";
        return;
    }

    public void close()
    {
        _transition = "close";
        getState().close(this);
        _transition = "";
        return;
    }

    public void enterScene(long sceneTime)
    {
        _transition = "enterScene";
        getState().enterScene(this, sceneTime);
        _transition = "";
        return;
    }

    public void open(Human human)
    {
        _transition = "open";
        getState().open(this, human);
        _transition = "";
        return;
    }

    public void pickUp(long guid)
    {
        _transition = "pickUp";
        getState().pickUp(this, guid);
        _transition = "";
        return;
    }

    public void sceneTimeOut()
    {
        _transition = "sceneTimeOut";
        getState().sceneTimeOut(this);
        _transition = "";
        return;
    }

    public void start()
    {
        _transition = "start";
        getState().start(this);
        _transition = "";
        return;
    }

    public TreasureBoxState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((TreasureBoxState) _state);
    }

    protected TreasureBox getOwner()
    {
        return (_owner);
    }

    public void setOwner(TreasureBox owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private TreasureBox _owner;

    public static abstract class TreasureBoxState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected TreasureBoxState(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(TreasureBoxContext context) {}
        protected void Exit(TreasureBoxContext context) {}

        protected void clear(TreasureBoxContext context)
        {
            Default(context);
        }

        protected void close(TreasureBoxContext context)
        {
            Default(context);
        }

        protected void enterScene(TreasureBoxContext context, long sceneTime)
        {
            Default(context);
        }

        protected void open(TreasureBoxContext context, Human human)
        {
            Default(context);
        }

        protected void pickUp(TreasureBoxContext context, long guid)
        {
            Default(context);
        }

        protected void sceneTimeOut(TreasureBoxContext context)
        {
            Default(context);
        }

        protected void start(TreasureBoxContext context)
        {
            Default(context);
        }

        protected void Default(TreasureBoxContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class MapBox
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final MapBox_Start Start =
            new MapBox_Start("MapBox.Start", 7);
        public static final MapBox_Closed Closed =
            new MapBox_Closed("MapBox.Closed", 8);
        public static final MapBox_Opening Opening =
            new MapBox_Opening("MapBox.Opening", 9);
        public static final MapBox_End End =
            new MapBox_End("MapBox.End", 10);
        private static final MapBox_Default Default =
            new MapBox_Default("MapBox.Default", -1);

    }

    protected static class MapBox_Default
        extends TreasureBoxState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected MapBox_Default(String name, int id)
        {
            super (name, id);
        }

        protected void start(TreasureBoxContext context)
        {


            (context.getState()).Exit(context);
            context.setState(MapBox.Start);
            (context.getState()).Entry(context);
            return;
        }
    //-----------------------------------------------------------
    // Member data.
    //
    }

    private static final class MapBox_Start
        extends MapBox_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MapBox_Start(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(TreasureBoxContext context)
            {
                TreasureBox ctxt = context.getOwner();

            ctxt.setState(StateMachineMessages.TreasureBoxState.TREASURE_BOX_START);
            return;
        }

        protected void enterScene(TreasureBoxContext context, long sceneTime)
        {
            TreasureBox ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.init(sceneTime);
            }
            finally
            {
                context.setState(MapBox.Closed);
                (context.getState()).Entry(context);
            }
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class MapBox_Closed
        extends MapBox_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MapBox_Closed(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(TreasureBoxContext context)
            {
                TreasureBox ctxt = context.getOwner();

            ctxt.setState(StateMachineMessages.TreasureBoxState.TREASURE_BOX_CLOSED);
            ctxt.broadcastState();
            return;
        }

        protected void clear(TreasureBoxContext context)
        {
            TreasureBox ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.clearHandler();
            }
            finally
            {
                context.setState(MapBox.End);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void open(TreasureBoxContext context, Human human)
        {
            TreasureBox ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.openHandler(human);
            }
            finally
            {
                context.setState(MapBox.Opening);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void sceneTimeOut(TreasureBoxContext context)
        {
            TreasureBox ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.sceneTimeOutHandler();
            }
            finally
            {
                context.setState(MapBox.End);
                (context.getState()).Entry(context);
            }
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class MapBox_Opening
        extends MapBox_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MapBox_Opening(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(TreasureBoxContext context)
            {
                TreasureBox ctxt = context.getOwner();

            ctxt.setState(StateMachineMessages.TreasureBoxState.TREASURE_BOX_OPENING);
            ctxt.broadcastState();
            return;
        }

        protected void clear(TreasureBoxContext context)
        {
            TreasureBox ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.clearHandler();
            }
            finally
            {
                context.setState(MapBox.End);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void close(TreasureBoxContext context)
        {
            TreasureBox ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.closeHandler();
            }
            finally
            {
                context.setState(MapBox.Closed);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void pickUp(TreasureBoxContext context, long guid)
        {
            TreasureBox ctxt = context.getOwner();

            TreasureBoxState endState = context.getState();

            context.clearState();
            try
            {
                ctxt.pickUpHandler(guid);
            }
            finally
            {
                context.setState(endState);
            }
            return;
        }

        protected void sceneTimeOut(TreasureBoxContext context)
        {
            TreasureBox ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.sceneTimeOutHandler();
            }
            finally
            {
                context.setState(MapBox.End);
                (context.getState()).Entry(context);
            }
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class MapBox_End
        extends MapBox_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MapBox_End(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(TreasureBoxContext context)
            {
                TreasureBox ctxt = context.getOwner();

            ctxt.setState(StateMachineMessages.TreasureBoxState.TREASURE_BOX_END);
            ctxt.broadcastState();
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
